[{"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/index.js":"1","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/App.js":"2","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/ChatFeed.jsx":"3","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/LoginForm.jsx":"4","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/EntranceScreen.jsx":"5","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/MyMessage.jsx":"6","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/TheirMessage.jsx":"7","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/MessageForm.jsx":"8","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/EncryptorDecryptor.jsx":"9","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/RegisterForm.jsx":"10","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/ChatCard.js":"11"},{"size":146,"mtime":1673291288459,"results":"12","hashOfConfig":"13"},{"size":870,"mtime":1673544378537,"results":"14","hashOfConfig":"13"},{"size":2221,"mtime":1673291706716,"results":"15","hashOfConfig":"13"},{"size":1799,"mtime":1673291510426,"results":"16","hashOfConfig":"13"},{"size":734,"mtime":1673544210110,"results":"17","hashOfConfig":"13"},{"size":564,"mtime":1672834355114,"results":"18","hashOfConfig":"13"},{"size":1033,"mtime":1672073898548,"results":"19","hashOfConfig":"13"},{"size":1583,"mtime":1673291473197,"results":"20","hashOfConfig":"13"},{"size":509,"mtime":1673291697184,"results":"21","hashOfConfig":"13"},{"size":3157,"mtime":1673544192322,"results":"22","hashOfConfig":"13"},{"size":4884,"mtime":1673543928563,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"14hdkye",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/index.js",[],["50","51"],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/App.js",["52"],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/ChatFeed.jsx",["53"],"import MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport MessageForm from './MessageForm';\n\nconst ChatFeed = (props) => {\n  const { chats, activeChat, userName, messages, ChatCard } = props;\n\n  const chat = chats && chats[activeChat];\n\n  const handleLogout = () => {\n    localStorage.clear();\n    window.location.reload();\n  };\n\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\n    <div\n      key={`read_${index}`}\n      className=\"read-receipt\"\n      style={{\n        float: isMyMessage ? 'right' : 'left',\n        backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\n      }}\n    />\n  ));\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      const isMyMessage = userName === message.sender.username;\n      \n      return (\n        <div key={`msg_${index}`} style={{ width: '100%' }}>\n          <div className=\"message-block\">\n            {isMyMessage\n              ? <MyMessage message={message} /> //display decrypt(message)\n              : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\n          </div>\n          <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\n            {renderReadReceipts(message, isMyMessage)}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  if (!chat) return <div />;\n\n  return (\n    <div className=\"chat-feed\">\n      <div className=\"logout\">\n        <button onClick={handleLogout}>Log Out</button>\n      </div>\n      <div className=\"chat-title-container\">\n        <div className=\"chat-title\">{chat?.title}</div>\n        <div className=\"chat-subtitle\">\n          {chat.people.map((person) => ` ${person.person.username}`)}\n        </div>\n      </div>\n      {renderMessages()}\n      <div style={{ height: '100px' }} />\n      <div className=\"message-form-container\">\n        <MessageForm {...props} chatId={activeChat} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatFeed;\n\n","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/LoginForm.jsx",[],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/EntranceScreen.jsx",[],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/MyMessage.jsx",[],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/TheirMessage.jsx",[],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/MessageForm.jsx",[],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/EncryptorDecryptor.jsx",[],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/RegisterForm.jsx",["54"],"import { useState } from \"react\";\r\n\r\nconst RegisterForm = (props) => {\r\n    \r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [first, setFirst] = useState('');\r\n  const [last, setLast] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [email, setEmail] = useState('');\r\n\r\n    const handleSubmit = async e => {\r\n      e.preventDefault();\r\n\r\n      //header for authentication\r\n      const authObject = {'Private-Key': '6ba9b087-8aa4-4bf9-9117-6dd61a5552c4'}\r\n      var axios = require('axios');\r\n\r\n      var config = {\r\n        method: 'post',\r\n        url: 'https://api.chatengine.io/users/',\r\n        headers: authObject,\r\n        data : {'username': username, 'secret': password}\r\n      };\r\n      \r\n      axios(config)\r\n      .then(function (response) {\r\n        console.log(JSON.stringify(response.data));\r\n        setUsername('');\r\n        setPassword('');\r\n        setEmail('');\r\n        setFirst('');\r\n        setLast('');\r\n        props.stopRegistering();\r\n        alert('Successfully registered, please log in');\r\n        })\r\n      .catch(function (error) {\r\n        alert('Could not register, username is already taken');\r\n        console.log(error);\r\n      });\r\n    }\r\n    \r\n    const logInHandler = () => {\r\n        props.stopRegistering();\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n          <div className=\"form\">\r\n            <h1 className=\"title\">Register Form</h1>\r\n            <h4 style={{justifyContent: 'center', display: 'flex', marginBottom: '8px'}}>Fields With * Are Required</h4>\r\n            <form onSubmit={handleSubmit}>\r\n              <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username*\" required />\r\n              <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password*\" required />\r\n              {/* <input type=\"password\" value={password2} onChange={(e) => setPassword2(e.target.value)} className=\"input\" placeholder=\"Confirm Password\" required /> */}\r\n              <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} className=\"input\" placeholder=\"Email\" />\r\n              <input type=\"first\" value={first} onChange={(e) => setFirst(e.target.value)} className=\"input\" placeholder=\"First Name\" />\r\n              <input type=\"last\" value={last} onChange={(e) => setLast(e.target.value)} className=\"input\" placeholder=\"Last Name\" />\r\n              <div align=\"center\">\r\n                <button type=\"submit\" className=\"button\">\r\n                  <span>Register</span>\r\n                </button>\r\n              </div>\r\n            </form>\r\n            <div style={{justifyContent: 'center' ,direction: 'ltr', display: 'flex'}}>\r\n              <h3 style={{color: 'darkgrey'}}>Already Have An Account?</h3>\r\n              <button onClick={logInHandler} style={{marginLeft: '10px'}}>\r\n                <span>Log In</span>\r\n              </button>\r\n            </div>\r\n            <h1>{error}</h1>\r\n          </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RegisterForm","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/ChatCard.js",["55","56","57","58"],"import React, { useContext } from 'react'\nimport { ChatEngineContext } from 'react-chat-engine'\nimport _ from 'lodash'\n\n//const { htmlToText } = require('html-to-text')\n\nfunction getDateTime(date, offset) {\n    if (!date) return ''\n    \n    date = date.replace(' ', 'T')\n    offset = offset ? offset : 0\n\n    const year = date.substr(0,4)\n    const month = date.substr(5,2)\n    const day = date.substr(8,2)\n    const hour = date.substr(11,2)\n    const minute = date.substr(14,2)\n    const second = date.substr(17,2)\n    \n    var d = new Date(`${year}-${month}-${day}T${hour}:${minute}:${second}`)\n    d.setHours(d.getHours() + offset)\n    return d\n}\n\nconst ChatCard = props => {\n    const { chat, messages, index } = props\n    const { conn, activeChat, setActiveChat } = useContext(ChatEngineContext)\n    \n    // const keys = Object.keys(messages);\n    // msgs = keys.map((key, index) => {\n    //     const lastMessageKey = index === 0 ? null : keys[index - 1];\n    //     const lastMessage = messages[lastMessageKey - 1]\n    // });\n\n    if (!conn || conn === null) return <div/>\n\n    const extraStyle = activeChat === chat.id ? styles.activeChat : {}\n    const title = chat?.title\n\n    let lastMessage = \"Say hello!\"\n    // let lastMessage = htmlToText(chat.last_message.text, {})\n    // if (!lastMessage) {\n    //     lastMessage = chat.last_message.attachments.length > 0 ?\n    //     `${chat.last_message.attachments.length} image${chat.last_message.attachments.length > 1 ? 's' : ''}` :\n    //     'Say hello!'\n    // }\n\n    function didReadLastMessage(chat) {\n        let didReadLastMessage = true\n        chat.people?.map(chat_person => {\n            if(conn.userName === chat_person.person.username) {\n                didReadLastMessage = chat.last_message.id === chat_person.last_read\n            }\n        })\n        return didReadLastMessage\n    }\n\n    function daySinceSent(date) {\n        if (!date) return ''\n        return getDateTime(date, conn.offset).toString().substr(4, 6)\n    }\n\n    return (\n        <div triggers={['onClick', 'onMouseEnter']} x={3} timing={60} width={'-webkit-fill-available'}>\n            <div \n                onClick={() => setActiveChat(chat.id)}\n                style={{ ...styles.chatContainer, ...extraStyle }}\n                className={`ce-chat-card ${activeChat === chat.id && 'ce-active-chat-card'}`}\n            >\n                <div \n                    style={ styles.titleText }\n                    className='ce-chat-title-text'\n                    id={`ce-chat-card-title-${title}`}\n                >\n                    <div \n                        style={{ \n                            width: !didReadLastMessage(chat) && 'calc(100% - 18px)', \n                            overflowX: 'hidden', \n                            display: 'inline-block' \n                        }}\n                    >\n                        { title }\n                    </div>\n                    \n                    {\n                        !didReadLastMessage(chat) &&\n                        <div \n                            className='ce-chat-unread-dot'\n                            style={{ \n                                marginTop: '5px',\n                                width: '12px',\n                                height: '12px',\n                                borderRadius: '6px',\n                                backgroundColor: '#1890ff',\n                                float: 'right', \n                                display: 'inline-block'\n                            }} \n                        />\n                    }\n                </div>\n\n                <div style={{ width: '100%' }} className='ce-chat-subtitle'>\n                    <div style={styles.messageText} className='ce-chat-subtitle-text ce-chat-subtitle-message'>\n                        { lastMessage }\n                    </div>\n\n                    <div \n                        className='ce-chat-subtitle-text ce-chat-subtitle-date'\n                        style={{ ...styles.messageText, ...{ textAlign: 'right', width: '25%' } }}\n                    >\n                        { daySinceSent(chat?.last_message?.created) }\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst styles={\n    chatContainer: { \n        padding: '16px', \n        paddingBottom: '12px',\n        cursor: 'pointer'\n    },\n    titleText: { \n        fontWeight: '500',\n        paddingBottom: '4px', \n        whiteSpace: 'nowrap', \n        overflow: 'hidden' \n    },\n    messageText: {\n        width: '75%',\n        color: 'rgba(153, 153, 153, 1)', \n        fontSize: '14px', \n        whiteSpace: 'nowrap', \n        overflow: 'hidden',\n        display: 'inline-block'\n    },\n    activeChat: {\n        backgroundColor: '#d9d9d9',\n        border: '0px solid white',\n        borderRadius: '12px'\n    },\n}\n\nexport default ChatCard;",{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":6,"column":8,"nodeType":"65","messageId":"66","endLine":6,"endColumn":16},{"ruleId":"63","severity":1,"message":"67","line":6,"column":50,"nodeType":"65","messageId":"66","endLine":6,"endColumn":58},{"ruleId":"63","severity":1,"message":"68","line":9,"column":17,"nodeType":"65","messageId":"66","endLine":9,"endColumn":25},{"ruleId":"63","severity":1,"message":"69","line":3,"column":8,"nodeType":"65","messageId":"66","endLine":3,"endColumn":9},{"ruleId":"63","severity":1,"message":"70","line":26,"column":19,"nodeType":"65","messageId":"66","endLine":26,"endColumn":27},{"ruleId":"63","severity":1,"message":"71","line":26,"column":29,"nodeType":"65","messageId":"66","endLine":26,"endColumn":34},{"ruleId":"72","severity":1,"message":"73","line":50,"column":38,"nodeType":"74","messageId":"75","endLine":50,"endColumn":40},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'ChatCard' is defined but never used.","Identifier","unusedVar","'ChatCard' is assigned a value but never used.","'setError' is assigned a value but never used.","'_' is defined but never used.","'messages' is assigned a value but never used.","'index' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]
[{"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/index.js":"1","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/App.js":"2","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/ChatFeed.jsx":"3","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/LoginForm.jsx":"4","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/EntranceScreen.jsx":"5","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/MyMessage.jsx":"6","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/TheirMessage.jsx":"7","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/MessageForm.jsx":"8","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/EncryptorDecryptor.jsx":"9","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/RegisterForm.jsx":"10","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/ChatCard.js":"11"},{"size":146,"mtime":1673291288459,"results":"12","hashOfConfig":"13"},{"size":870,"mtime":1673544378537,"results":"14","hashOfConfig":"13"},{"size":2742,"mtime":1673599948444,"results":"15","hashOfConfig":"13"},{"size":1781,"mtime":1673598519658,"results":"16","hashOfConfig":"13"},{"size":734,"mtime":1673544210110,"results":"17","hashOfConfig":"13"},{"size":564,"mtime":1672834355114,"results":"18","hashOfConfig":"13"},{"size":1119,"mtime":1673599789787,"results":"19","hashOfConfig":"13"},{"size":1583,"mtime":1673291473197,"results":"20","hashOfConfig":"13"},{"size":509,"mtime":1673291697184,"results":"21","hashOfConfig":"13"},{"size":3217,"mtime":1673598905997,"results":"22","hashOfConfig":"13"},{"size":4884,"mtime":1673543928563,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"14hdkye",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/index.js",[],["49","50"],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/App.js",["51"],"import React from 'react';\nimport { ChatEngine } from 'react-chat-engine';\nimport ChatFeed from './components/ChatFeed';\nimport './App.css';\nimport EntranceScreen from './components/EntranceScreen';\nimport ChatCard from './components/ChatCard';\n\n\nconst projectID = 'a835b881-cb1e-45cf-8585-8fb5502bc8b1';\n\nconst App = () => {\n  if (!localStorage.getItem('username')) return <EntranceScreen />;\n\n  return (\n    <ChatEngine\n      height=\"100vh\"\n      projectID={projectID}\n      userName={localStorage.getItem('username')}\n      userSecret={localStorage.getItem('password')}\n      renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\n      //renderChatCard={(chat, index) =>   <ChatCard key={`${index}`} chat={chat} />}\n      onNewMessage={() => new Audio('https://chat-engine-assets.s3.amazonaws.com/click.mp3').play()}\n\n    />\n  );\n};\n\n\nexport default App;\n","/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/ChatFeed.jsx",["52","53"],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/LoginForm.jsx",[],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/EntranceScreen.jsx",[],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/MyMessage.jsx",[],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/TheirMessage.jsx",[],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/MessageForm.jsx",[],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/EncryptorDecryptor.jsx",[],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/RegisterForm.jsx",["54","55","56"],"/home/jezra/Documents/Project/Encrypted-Chat-Project/src/components/ChatCard.js",["57","58","59","60"],"import React, { useContext } from 'react'\nimport { ChatEngineContext } from 'react-chat-engine'\nimport _ from 'lodash'\n\n//const { htmlToText } = require('html-to-text')\n\nfunction getDateTime(date, offset) {\n    if (!date) return ''\n    \n    date = date.replace(' ', 'T')\n    offset = offset ? offset : 0\n\n    const year = date.substr(0,4)\n    const month = date.substr(5,2)\n    const day = date.substr(8,2)\n    const hour = date.substr(11,2)\n    const minute = date.substr(14,2)\n    const second = date.substr(17,2)\n    \n    var d = new Date(`${year}-${month}-${day}T${hour}:${minute}:${second}`)\n    d.setHours(d.getHours() + offset)\n    return d\n}\n\nconst ChatCard = props => {\n    const { chat, messages, index } = props\n    const { conn, activeChat, setActiveChat } = useContext(ChatEngineContext)\n    \n    // const keys = Object.keys(messages);\n    // msgs = keys.map((key, index) => {\n    //     const lastMessageKey = index === 0 ? null : keys[index - 1];\n    //     const lastMessage = messages[lastMessageKey - 1]\n    // });\n\n    if (!conn || conn === null) return <div/>\n\n    const extraStyle = activeChat === chat.id ? styles.activeChat : {}\n    const title = chat?.title\n\n    let lastMessage = \"Say hello!\"\n    // let lastMessage = htmlToText(chat.last_message.text, {})\n    // if (!lastMessage) {\n    //     lastMessage = chat.last_message.attachments.length > 0 ?\n    //     `${chat.last_message.attachments.length} image${chat.last_message.attachments.length > 1 ? 's' : ''}` :\n    //     'Say hello!'\n    // }\n\n    function didReadLastMessage(chat) {\n        let didReadLastMessage = true\n        chat.people?.map(chat_person => {\n            if(conn.userName === chat_person.person.username) {\n                didReadLastMessage = chat.last_message.id === chat_person.last_read\n            }\n        })\n        return didReadLastMessage\n    }\n\n    function daySinceSent(date) {\n        if (!date) return ''\n        return getDateTime(date, conn.offset).toString().substr(4, 6)\n    }\n\n    return (\n        <div triggers={['onClick', 'onMouseEnter']} x={3} timing={60} width={'-webkit-fill-available'}>\n            <div \n                onClick={() => setActiveChat(chat.id)}\n                style={{ ...styles.chatContainer, ...extraStyle }}\n                className={`ce-chat-card ${activeChat === chat.id && 'ce-active-chat-card'}`}\n            >\n                <div \n                    style={ styles.titleText }\n                    className='ce-chat-title-text'\n                    id={`ce-chat-card-title-${title}`}\n                >\n                    <div \n                        style={{ \n                            width: !didReadLastMessage(chat) && 'calc(100% - 18px)', \n                            overflowX: 'hidden', \n                            display: 'inline-block' \n                        }}\n                    >\n                        { title }\n                    </div>\n                    \n                    {\n                        !didReadLastMessage(chat) &&\n                        <div \n                            className='ce-chat-unread-dot'\n                            style={{ \n                                marginTop: '5px',\n                                width: '12px',\n                                height: '12px',\n                                borderRadius: '6px',\n                                backgroundColor: '#1890ff',\n                                float: 'right', \n                                display: 'inline-block'\n                            }} \n                        />\n                    }\n                </div>\n\n                <div style={{ width: '100%' }} className='ce-chat-subtitle'>\n                    <div style={styles.messageText} className='ce-chat-subtitle-text ce-chat-subtitle-message'>\n                        { lastMessage }\n                    </div>\n\n                    <div \n                        className='ce-chat-subtitle-text ce-chat-subtitle-date'\n                        style={{ ...styles.messageText, ...{ textAlign: 'right', width: '25%' } }}\n                    >\n                        { daySinceSent(chat?.last_message?.created) }\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst styles={\n    chatContainer: { \n        padding: '16px', \n        paddingBottom: '12px',\n        cursor: 'pointer'\n    },\n    titleText: { \n        fontWeight: '500',\n        paddingBottom: '4px', \n        whiteSpace: 'nowrap', \n        overflow: 'hidden' \n    },\n    messageText: {\n        width: '75%',\n        color: 'rgba(153, 153, 153, 1)', \n        fontSize: '14px', \n        whiteSpace: 'nowrap', \n        overflow: 'hidden',\n        display: 'inline-block'\n    },\n    activeChat: {\n        backgroundColor: '#d9d9d9',\n        border: '0px solid white',\n        borderRadius: '12px'\n    },\n}\n\nexport default ChatCard;",{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":6,"column":8,"nodeType":"67","messageId":"68","endLine":6,"endColumn":16},{"ruleId":"65","severity":1,"message":"69","line":6,"column":50,"nodeType":"67","messageId":"68","endLine":6,"endColumn":58},{"ruleId":"65","severity":1,"message":"70","line":15,"column":9,"nodeType":"67","messageId":"68","endLine":15,"endColumn":16},{"ruleId":"65","severity":1,"message":"71","line":9,"column":17,"nodeType":"67","messageId":"68","endLine":9,"endColumn":25},{"ruleId":"65","severity":1,"message":"72","line":11,"column":10,"nodeType":"67","messageId":"68","endLine":11,"endColumn":16},{"ruleId":"65","severity":1,"message":"73","line":11,"column":18,"nodeType":"67","messageId":"68","endLine":11,"endColumn":27},{"ruleId":"65","severity":1,"message":"74","line":3,"column":8,"nodeType":"67","messageId":"68","endLine":3,"endColumn":9},{"ruleId":"65","severity":1,"message":"75","line":26,"column":19,"nodeType":"67","messageId":"68","endLine":26,"endColumn":27},{"ruleId":"65","severity":1,"message":"76","line":26,"column":29,"nodeType":"67","messageId":"68","endLine":26,"endColumn":34},{"ruleId":"77","severity":1,"message":"78","line":50,"column":38,"nodeType":"79","messageId":"80","endLine":50,"endColumn":40},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'ChatCard' is defined but never used.","Identifier","unusedVar","'ChatCard' is assigned a value but never used.","'getFile' is assigned a value but never used.","'setError' is assigned a value but never used.","'avatar' is assigned a value but never used.","'setAvatar' is assigned a value but never used.","'_' is defined but never used.","'messages' is assigned a value but never used.","'index' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]